apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: food-order-demo-postgres
  namespace: dev
spec:
  serviceName: food-order-demo-postgres
  replicas: 1
  selector:
    matchLabels:
      app: food-order-demo-postgres
  template:
    metadata:
      labels:
        app: food-order-demo-postgres
    spec:
      containers:
        - name: postgres
          image: postgres:latest
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_DB
              value: foodordering
            - name: POSTGRES_USER
              value: root
            - name: POSTGRES_PASSWORD
              value: password
          volumeMounts:
            - name: foodordering-postgres-data
              mountPath: /home/nash/food-order-databases/food-order-demo-db/data
      volumes:
        - name: foodordering-postgres-data
          persistentVolumeClaim:
            claimName: foodordering-postgres-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: foodordering-postgres-pvc
  namespace: dev
spec:
  accessModes:
    - ReadWriteOnce # ReadWriteOnce, the once means one node only can readwrite to volume
  resources:
    requests:
      storage: 1Gi  # Adjust the storage size as needed
---
apiVersion: v1
kind: Service
metadata:
  name: food-order-demo-postgres
  labels:
    app: food-order-demo-postgres
  namespace: dev
spec:
  ports:
    - name: gateway-port
      port: 5432
      targetPort: 5432
  type: ClusterIP
  selector:
    app: food-order-demo-postgres
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: food-ordering-demo-springboot
  labels:
    app: food-ordering-demo-springboot
    app-log-type: json-logging-app
    decode_log_event_to_json_object: "true"
    collect_logs_with_filebeat: "true"
  namespace: dev
  annotations:
    co.elastic.logs.food-ordering-demo-springboot/json.keys_under_root: "true"
    co.elastic.logs.food-ordering-demo-springboot/json.add_error_key: "true"
    co.elastic.logs.food-ordering-demo-springboot/json.message_key: "message"
spec:
  replicas: 1
  selector:
    matchLabels:
      app: food-ordering-demo-springboot
  template:
    metadata:
      labels:
        app: food-ordering-demo-springboot
        app-log-type: json-logging-app
        decode_log_event_to_json_object: "true"
        collect_logs_with_filebeat: "true"
      annotations:
        co.elastic.logs.food-ordering-demo-springboot/json.keys_under_root: "true"
        co.elastic.logs.food-ordering-demo-springboot/json.add_error_key: "true"
        co.elastic.logs.food-ordering-demo-springboot/json.message_key: "message"
    spec:
      containers:
      - name: food-ordering-demo-springboot
        image: ${NEXUS_REPO_HOST}/digitalbiohumans/poc/food-ordering-axoniq-demo-springboot:0.0.7.2-spring-cloud-config-secure-client-SNAPSHOT
        imagePullPolicy: Always
        env:
          - name: SPRING_PROFILES_ACTIVE
            value: dev-secure
          - name: SPRING_CLOUD_CONFIG_URI
            value: http://food-ordering-springboot-cloud-config:8888
        ports:
        - name: port-tcp
          containerPort: 8080
          protocol: TCP
        - name: port-udp
          containerPort: 8080
          protocol: UDP
          #TODO: Implement health or ready checks
---
apiVersion: v1
kind: Service
metadata:
  name: food-ordering-demo-springboot
  labels:
    app: food-ordering-demo-springboot
  namespace: dev
spec:
  ports:
  - name: gateway-port
    port: 8080
    targetPort: 8080
  type: ClusterIP
  selector:
    app: food-ordering-demo-springboot
---